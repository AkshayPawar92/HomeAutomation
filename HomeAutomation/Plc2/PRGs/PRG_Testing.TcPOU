<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="PRG_Testing" Id="{b6fffdb7-2a36-4774-ac1d-63cbacf3b383}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_Testing
VAR
	digitalLamp_Wrapper: DigitalLamp_Wrapper;
	digitalLamp_Wrapper2: DigitalLamp_Wrapper;
	
	digitalLampWithPushButton_1: DigitalLampWithPushButton_1;
	digitalLampWithPushButton: OnOffDeviceControl;
	
	analogDevice: AnalogDevice(0, 100, 0, 32767, 10);
	analogStatus: INT;
	setAnalogValue: INT;
	bSetValue: BOOL;
	bInc: BOOL;
	bDec: BOOL;
	bOn: BOOL;
	bOff: BOOL;
	analogDeviceControl: AnalogDeviceControl(ZeroIn:= 0, ZeroOut:= 100, SpanIn:= 0, SpanOut:= 32767, PLC_CYCLE_TIME_ms:= 10, T_LONG_PRESS:= T#2S, RampUpTime:= T#5S, RampDownTime:= T#5S); 
	fan : FourStateDevice;

	fanState: INT := -1;
	fanSpeed: INT;
	
	Variable_In: REAL;			//	raw value of analog card
	Input_min: REAL;			//	min limit of analog card	
	Input_max: REAL;			//	max limit of analog card
	Output_min: REAL;			//	Scalled min limit
	Output_max: REAL;			//	Scalled max limit	
	scalled: REAL;
	
	curtain: Curtain;
	curtainOpening: INT;
	curtainWithSensor: CurtainWithSensor;
	genericCurtain : I_Curtain := CurtainWithSensor;		//	curtain;
	
	bSelectCurtain: BOOL;
	bSelectCurtain2: BOOL;
	simu_tonOpenSensor: TON;
	simu_tonCloseSensor: TON;
	OpenSensor: BOOL;
	CloseSensor: BOOL;
	
	curtainWithManualCalibration: CurtainWithManualCalibration(FALSE);
	simu_Sensor: TIME := T#5s;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
	CurtainWithManualCalibration();
	CurtainWithManualCalibration.ClosingTime		:=	simu_Sensor;
	CurtainWithManualCalibration.OpeningTime	:=	simu_Sensor;
	curtainOpening	:=	CurtainWithManualCalibration.Status;
	IF bOn THEN
		CurtainWithManualCalibration.Open(IN := TRUE);
	ELSE
		CurtainWithManualCalibration.Open(IN := FALSE);
	END_IF
	
	IF bOff THEN
		CurtainWithManualCalibration.Close(IN := TRUE);
	ELSE
		CurtainWithManualCalibration.Close(IN := FALSE);
	END_IF	

	
	//CurtainWithSensor(OpenSensor := OpenSensor, CloseSensor := CloseSensor);
//	IF bSelectCurtain THEN
//		genericCurtain	:=	curtain;
//		bSelectCurtain	:=	FALSE;
//	END_IF
//	IF bSelectCurtain2 THEN
//		genericCurtain	:=	curtainWithSensor;
//		bSelectCurtain2	:=	FALSE;
//	END_IF
	
//	curtainOpening	:=	CurtainWithSensor.Status;
//	IF bOn THEN
////		curtain.Open(IN	:=	TRUE);
////		curtainWithSensor.Open(IN	:=	TRUE);
//		genericCurtain.Open(IN	:=	TRUE);
//		simu_tonOpenSensor(IN:= TRUE, PT:= simu_Sensor, Q=> , ET=> );
//		CloseSensor	:= FALSE;
//		IF simu_tonOpenSensor.Q THEN
//			bOn	:=	FALSE;
//			simu_tonOpenSensor(IN:= FALSE);
//			OpenSensor	:=	TRUE;
//		END_IF
//	ELSE
////		curtain.Open(IN	:=	FALSE);
////		curtainWithSensor.Open(IN	:=	FALSE);
//		genericCurtain.Open(IN	:=	FALSE);
//		simu_tonOpenSensor(IN:= FALSE);
//	END_IF
	
//	IF bOff THEN
////		curtain.Close(IN	:=	TRUE);
////		curtainWithSensor.Close(IN	:=	TRUE);
//		genericCurtain.Close(IN	:=	TRUE);
//		simu_tonCloseSensor(IN:= TRUE, PT:= simu_Sensor, Q=> , ET=> );
//		OpenSensor	:=	FALSE;
//		IF simu_tonCloseSensor.Q THEN
//			bOff	:=	FALSE;
//			simu_tonCloseSensor(IN:= FALSE);
//			CloseSensor	:=	TRUE;
//		END_IF
//	ELSE
////		curtain.Close(IN	:=	FALSE);
////		curtainWithSensor.Close(IN	:=	FALSE);
//		genericCurtain.Close(IN	:=	FALSE);
//		simu_tonCloseSensor(IN:= FALSE);
//	END_IF
	


	
//	digitalLamp_Wrapper.KeyType		:=	0;
//	digitalLamp_Wrapper2.KeyType	:=	1;

//	digitalLamp_Wrapper();
//	digitalLamp_Wrapper2();
	
//	digitalLampWithPushButton_1();

//	digitalLampWithPushButton();
	

//	analogDevice();
//	analogStatus	:=	analogDevice.Status;
//	IF bSetValue THEN
//		analogDevice.SetValue(value	:=	setAnalogValue);
//		bSetValue	:=	FALSE;
//	END_IF
	
//	IF bInc THEN
//		analogDevice.IncreaseValue(EN:= TRUE, RampUpTime	:=	T#5S);
//	ELSE
//		analogDevice.IncreaseValue(EN:= FALSE, RampUpTime	:=	T#5S);
//	END_IF
	
//	IF bDec THEN
//		analogDevice.DecreaseValue(EN:= TRUE, RampDownTime	:=	T#5S);
//	ELSE
//		analogDevice.DecreaseValue(EN:= FALSE, RampDownTime	:=	T#5S);
//	END_IF
	
//	IF bOn THEN
//		analogDevice.On();
//	END_IF
	
//	IF bOff THEN
//		analogDevice.Off();
//	END_IF
	
//	analogDeviceControl();
//	analogStatus	:=	analogDeviceControl.Status;
		
//	fan();
//	fanSpeed	:=	fan.Status;
//	IF bOff THEN
//	fan.Off();
//	bOff:=FALSE;
//	END_IF
		
//	IF bOn THEN
//		fan.On();
//		bOn:=FALSE;
//	END_IF
	
//	CASE fanState OF
//	0:	;
//	1:	fan.State_1();
//	2:	fan.State_2();
//	3:	fan.State_3();
//	4:	fan.State_4();
//	END_CASE
	
		
//IF (Input_max - Input_min) <> 0 THEN
//	scalled := ((Variable_In - Input_min) / (Input_max - Input_min)) * (Output_max - Output_min) + Output_min;
//ELSE
//	scalled	:=	0;
//END_IF]]></ST>
    </Implementation>
    <LineIds Name="PRG_Testing">
      <LineId Id="316" Count="1" />
      <LineId Id="321" Count="0" />
      <LineId Id="323" Count="1" />
      <LineId Id="327" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="331" Count="1" />
      <LineId Id="330" Count="0" />
      <LineId Id="333" Count="3" />
      <LineId Id="326" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="247" Count="2" />
      <LineId Id="238" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="257" Count="1" />
      <LineId Id="260" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="204" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="262" Count="2" />
      <LineId Id="272" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="206" Count="1" />
      <LineId Id="216" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="254" Count="1" />
      <LineId Id="212" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="41" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="49" Count="1" />
      <LineId Id="68" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="76" Count="2" />
      <LineId Id="82" Count="2" />
      <LineId Id="81" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="98" Count="1" />
      <LineId Id="127" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="133" Count="1" />
      <LineId Id="161" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="135" Count="2" />
      <LineId Id="144" Count="3" />
      <LineId Id="138" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="149" Count="3" />
      <LineId Id="148" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>